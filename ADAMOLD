// DP omptimizations  ,http://codeforces.com/blog/entry/8219 ,thanks to problem setter morass :p


#include<bits/stdc++.h>
#define loop(i,n) for(int i=0;i<n;i++)
#define loop1(i,n) for(int i=1;i<=n;i++)

using namespace std;

#define MAX 5002
#define ll long long
#define mset(a,val) memset(a,val,sizeof(a))
#define INFLL LONG_LONG_MAX
ll dp1[MAX][MAX],dp2[MAX][MAX],DP[MAX][MAX];
int n,k;
ll ans=INFLL;
void solve(int l,int r,int lo,int ro,int q){
    if(r<l)return;
    int m=(l+r)>>1;
    ll bm=INFLL;int bi;
    for(int i=max(lo,m);i<=ro;i++){
        if(DP[i+1][q-1]!=INFLL)
        if(DP[i+1][q-1]+dp2[i][m]<bm){
            bm=DP[i+1][q-1]+dp2[i][m];
            bi=i;
        }
    }
    DP[m][q]=bm;
    if(m==0)ans=min(ans,bm);
    solve(l,m-1,lo,bi,q);
    solve(m+1,r,bi,ro,q);
}
int main(){
    scanf("%d %d",&n,&k);k++;
               /// dp1 for suffices and dp2 range XORs
    for(int i=0;i<=n;i++){
        for(int j=0;j<=n;j++)
            dp1[i][j]=dp2[i][j]=0;
    }
    loop(i,n){
        DP[i][0]=INFLL;
    }
    int a[n];
    loop(i,n){
        scanf("%d",&a[i]);
    }
    loop(i,n){
        for(int j=i+1;j<n;j++){
            dp1[i][j]=dp1[i][j-1]+(a[i]^a[j]);          /// here dp1[i-->lower][j--->higher]
        }
    }
    for(int i=1;i<n;i++){
        for(int j=i-1;j>=0 ;j--){
            dp2[i][j]=dp2[i][j+1]+dp1[j][i];           /// here dp1[i-->higher][j--->lower]
        }
    }
    loop1(i,k){
        solve(0,n-1,0,n-1,i);
    }
    printf("%lld\n",ans);
}
